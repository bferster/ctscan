<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta http-equiv="x-ua-compatible" content="ie=edge">
	<script src="lib/jquery.min.js"></script>
 	<script src="lib/jquery-ui.min.js"></script>
	<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
  	<link REL="SHORTCUT ICON" HREF="img/favicon.ico">
	<title>CTScan Compare</title>

	<style type="text/css">
		 
		 body { 			font-family: Verdana,Geneva,sans-serif; font-size:13px; box-sizing: border-box;
							padding: 0px; margin: 0px; 
							}
		.ct-mainPanel {		background-color:#eee; border-radius: 6px; margin-top: 16px; padding: 12px; max-width: 1000px;
							margin-left: auto; margin-right: auto; opacity: 0;
							}
		.ct-chartPanel {	background-color:#fff; margin-top: 16px; opacity: 0; text-align:left;
							font-size: 12px; padding: 8px; border-radius: 6px;
							}
		.ct-chart {			display: inline-block; width:100%;
							}
		.ct-chartBox {		display: inline-block; text-align: center; font-weight: bold; width: 181px; padding: 1px;
							border: 1px solid #999; margin: 4px; margin-bottom: 7px; border-radius: 4px;  user-select: none;
							}
		.ct-dataPanel {		background-color:#fff; max-width:1000px; margin-left: auto; margin-right: auto; opacity: 0; 
							max-height: 2000px;  overflow-y:auto;
							}
		.ct-is 	{			border-radius:4px; padding-left:8px; border: 1px solid #999; margin-bottom: 3px;
							}
		.ct-unselectable { 	-moz-user-select: none;     -khtml-user-select: none;
		   			 		-webkit-user-select: none;  -ms-user-select: none;   user-select: none;
		   					}

</style>
</head>
<body>
	<div id="mainPanel" class="ct-mainPanel">
		<div style="text-align:center">
		<div class="ct-unselectable">
			<img src="img/ctlogo32.png"><br>
			<b>Classroom Teaching Scan Compare</b></div><br>
		</div>
		<ul id="chartPanel" class="ct-chartPanel">
			<li id="chart1" class="ct-chartBox"><div class="ct-chart" id="chart1Chart"></div><br>Events/min<br><br></li>
			<li id="chart2" class="ct-chartBox"><div class="ct-chart" id="chart2Chart"></div><br>Teacher status<br><br></li>
			<li id="chart3" class="ct-chartBox"><div class="ct-chart" id="chart3Chart"></div><br>Student actions<br><br></li>
			<li id="chart4" class="ct-chartBox"><div class="ct-chart" id="chart4Chart"></div><br>Engagement<br><br></li>
			<li id="chart5" class="ct-chartBox"><div class="ct-chart" id="chart5Chart"></div><br>Vocab words #<br><br></li>
			<li id="chart6" class="ct-chartBox"><div class="ct-chart" id="chart6Chart"></div><br>Vocab words time<br><br></li>
		</ul>
		Compare with other sessions: <select id="compGrade" class="ct-is"><option>in all grades</option><option>in this grade only</option></select>&nbsp;&nbsp;
		<select id="compSubject" class="ct-is"><option>for all subjects</option><option>for this subject only</option></select>&nbsp;&nbsp;
		<select id="compSetting" class="ct-is"><option>in all settings</option><option>in this setting only.</option></select>&nbsp;
        or just this Id:&nbsp;<input id="compId" class="ct-is" style="width:30px"/></td></tr>
	</div>
	<div id="dataPanel" class="ct-dataPanel"></div>

<script>

//////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN 
/////////////////////////////////////////////////////////////////////////////////////////////////

var curJson=null;															// Holds this session results
var allJson=null;															// Holds all session results
var sessionNum=28;															// Session index
var obsEvents=null;															// Points at events
var maxTime=0;																// Size of timeline
var svgNS="http://www.w3.org/2000/svg";										// Name space
var menuFile="menus.txt";													// Menu filename
var firstTime=0;															// First time flag
var scaleSpan=128;															// Scaling
var dataMedia=[];															// Holds media buttons											
var dataLabVals=[];															// Holds OTR button values											
var dataLabCats=[];															// Holds OTR button categories											
var dataActs=[];															// Holds media buttons											
var dataAcad=[];															// Holds academic diciplines
var menus=[];																// Holds menus
var butCts=[];																// Button counts
var ss,os,ts;																// Stat data
var othersLabel="Othr";														// Others chart label
var numCharts=6;															// Number of charts
var chartOptions={															// Chart base options
	height:250, legend: {position:"none" },
	chartArea:{top:16, bottom:16, left:40, right:16 }		
	};


$(document).ready(function() {								           	// ON PAGE LOADED

	var i;
	var url=window.location.search.substring(1);							// Get query string
	if (url) {																// If something	
		sessionNum=url;														// Get session id
		}
	document.title+=" ("+sessionNum+")";									// Add id to title		
	Query("id = '"+sessionNum+"'", function(d) { 							// Send query
		if (!d || d == "null")												// No hits													
			return;;														// Quit
		curJson=$.parseJSON(d)[0];											// Objectify result
		Start();															// Start timeline
		});

	$("#compSubject").on("change", function(e) {							// ON SUBJECT CHANGE
		GetObservations("subject");											// Show matching observations
		});													
	$("#compSetting").on("change", function(e) {							// ON SETTING CHANGE
		GetObservations("setting");											// Show matching observations
		});													
	$("#compGrade").on("change", function(e) {								// ON GRADE CHANGE
		GetObservations("grade");											// Show matching observations
		});													
	$("#compId").on("change", function(e) {									// ON ID CHANGE
		GetObservations("id");												// Show matching observations
		if (!$(this).val())		othersLabel="Othr";							// If blank
		else					othersLabel=$(this).val();					// Use id for label
	});													

 	$("#chartPanel" ).sortable();											// Make it sortable
	for (i=1;i<=numCharts;++i)												// For each chart
		$("#chart"+i).draggable({ connectToSortable: "#chartPanel" });		// Draggable

});																			// On ready

	function Start()
	{
		var i;
		obsEvents=$.parseJSON(curJson.events);								// Objectify events
		for (i=0;i<dataLabVals.length;++i)									// For each event button
			butCts[dataLabVals[i]]=0;										// Null each one
		
		for (i=0;i<obsEvents.length;++i) {									// For each event
			if (obsEvents[i].time-0 > maxTime)								// If a longer time
				maxTime=obsEvents[i].time-0;								// Use it
			if (obsEvents[i].d1 == "Event") 								// An event
				butCts[obsEvents[i].d3]++;									// Add to count
			}
	 	ShowData();															// Show data
 		GetObservations();
 	 }

	function GetObservations()											// GET SELECTED OBSERVATIONS FROM DB
	{
		var sub=$("#compSubject").val();									// Get subject
		var set=$("#compSetting").val();									// Get setting
		var gra=$("#compGrade").val();										// Get grade
		LoadingIcon(true,64);												// Show loading icon
		
		var q="id != '0'";													// Query base 
		if (sub.match(/this/)) 												// Just looking for this subject							
			q+=" AND subject LIKE '%"+curJson.subject+"%'"; 				// Add to query				
		if (set.match(/this/)) 												// Just looking for this setting							
			q+=" AND setting LIKE '%"+curJson.setting+"%'"; 				// Add to query				
		if (gra.match(/this/)) 												// Just looking for this grade							
			q+=" AND grade LIKE '%"+curJson.grade+"%'"; 					// Add to query				

		Query(q, function(d) { 												// Send query
				var i,str,ids=[];
				if (!d || d == "null")	{									// No hits													
					LoadingIcon(false);										// Hide loading icon
					return;													// Quit
					}
				d=$.parseJSON(d);											// Objectify result
				allJson=d;													// Store all data
				showCharts();												// Send list of ids
				});

		function showCharts()												// SHOW CHARTS
		{
			ss=CalcStats([curJson],"this",curJson.teacherId);				// Get this session stats
			ts=CalcStats(allJson,"all",curJson.teacherId);					// Get this teacher's stats
			os=CalcStats(allJson,"other",$("#compId").val());				// Get all teacher's stats
			LoadingIcon(false);												// Hide loading icon
			google.charts.load('current', {'packages':['corechart']});		// Load chart library
		
			google.charts.setOnLoadCallback(DrawChart1);					// Draw chart 1
			google.charts.setOnLoadCallback(DrawChart2);					// Draw chart 2
			google.charts.setOnLoadCallback(DrawChart3);					// Draw chart 3
			google.charts.setOnLoadCallback(DrawChart4);					// Draw chart 4
			google.charts.setOnLoadCallback(DrawChart5);					// Draw chart 5
			google.charts.setOnLoadCallback(DrawChart6);					// Draw chart 6
			if (!firstTime++) {												// Only once
				$("#mainPanel").animate({ opacity:1 },1500);				// Show main
				$("#chartPanel").animate({ opacity:1 },1500);				// Show charts
				$("#dataPanel").animate({ opacity:1 },1500);				// Show data
				}
			}
	}

	function CalcStats(d, mode, id)										// CALC STATS
	{
		var i,j,k=0,o,e;
		var trt,engNum,engTot;				
		var s=[],stats={};													// Holds stats
	
		if (!d || !d.length)												// No data
			return;															// Quit
		for (i=0;i<d.length;++i) {											// For each session
			if ((mode == "all") && (d[i].teacherId != id))					// If looking for this teacher's data only
				continue;													// Not right teacher	
			else if ((mode == "other") && (id) && (d[i].id != id))			// If only looking for one
				continue;													// Not right teacher	
			k=s.length;														// Stats index
			s.push({ events:[], tstatus:[], sactions:[], engaged:0 });		// Add session stats object
			e=$.parseJSON(d[i].events);										// Objectify events
			trt=0;	engNum=.001;	engTot=0;								// Null out
			s[k].vocabNum=0;	s[k].vocabTime=0;							// No vocabs yet
			for (j=0;j<e.length;++j) {										// For each event
				o=e[j];														// Point at event
				trt=Math.max(trt,o.time);									// Get max time
				if (o.d1 == "Event") {										// If an OTR type event
					if (s[k].events[o.d2])	s[k].events[o.d2]++;			// Add to count
					else					s[k].events[o.d2]=1;			// Add event type
					}
				if (o.d1 == "Teacher status") {								// If a teacher status
					if (isNaN(o.d5))										// Not a number
						continue;											// Skip it
					if (s[k].events[o.d3])	s[k].tstatus[o.d3]+=(o.d5-0);	// Add to tot time
					else					s[k].tstatus[o.d3]=o.d5-0;		// Add status type
					}
				if (o.d1 == "Student actions") {							// If a student status
					if (isNaN(o.d5) || !o.d2)								// Not a number
						continue;											// Skip it
					if (s[k].events[o.d3])	s[k].sactions[o.d2]+=(o.d5-0);	// Add to tot time
					else					s[k].sactions[o.d2]=o.d5-0;		// Add status type
					}
				else if (o.d2 == "Percent engaged") {						// If engagement
					++engNum;												// Add to count
					engTot+=(o.d3-0);										// Add pct
					}
				else if (o.d1 == "Vocab Word") {							// If vocab
					if (isNaN(o.d5) || !o.d2)								// Not a number
						continue;											// Skip it
					s[k].vocabNum++;										// Add to count
					s[k].vocabTime+=(o.d5-0);								// Add to tot time
					}
				}
			if (trt)
				for (var key in s[k].events) 								// For each event
					s[k].events[key]=(s[k].events[key]/(trt/60)).toFixed(2);	// Events/min
			s[k].engaged=(engTot/engNum).toFixed(2)							// Copy average engagement to global
			}																// Session closure
		
		engTot=0;															// Null out
		stats.events=[];													// Add array
		stats.tstatus=[];													// Add array
		stats.sactions=[];													// Add array
		for (i=0;i<s.length;++i) {											// For each session
			engTot+=(s[i].engaged-0);										// Add to engagement tot
			for (var key in s[i].events) {									// For each event
				if (stats.events[key])	stats.events[key]+=s[i].events[key]-0; // Add to count
				else					stats.events[key]=s[i].events[key]-0;	// Add first
				}
			for (var key in s[i].tstatus) {									// For each teacher status
				if (stats.tstatus[key])	stats.tstatus[key]+=s[i].tstatus[key]-0; // Add to count
				else					stats.tstatus[key]=s[i].tstatus[key]-0;  // Add first
				}
			for (var key in s[i].sactions) {								// For each student action
				if (stats.sactions[key])	stats.sactions[key]+=s[i].sactions[key]-0; // Add to count
				else						stats.sactions[key]=s[i].sactions[key]-0;  // Add first
				}
			}
		for (var key in stats.events) 										// For each event
			stats.events[key]=(stats.events[key]/s.length).toFixed(2);		// Average each event
		for (var key in stats.tstatus) 										// For each status
			stats.tstatus[key]=(stats.tstatus[key]/s.length).toFixed(2);	// Average
		for (var key in stats.sactions) 									// For each action
			stats.sactions[key]=(stats.sactions[key]/s.length).toFixed(2);	// Average
		stats.engaged=(engTot/s.length).toFixed(2)							// Average engagement 
		stats.vocabNum=(s[k].vocabNum/s.length).toFixed(2)					// Average words 
		stats.vocabTime=(s[k].vocabTime/s.length).toFixed(2)				// Average words 
		return stats;														// Return stats
	}

	function ShowData()													// SHOW DATA
	{
		var i,o,str="<br>";
		str+="<div style='display:inline-block;margin-right:32px;vertical-align:top'><table>"
		str+="<tr><td style='width:100px'><b>Session Id:</b></td><td>"+curJson.id+"</td></tr>";
		str+="<tr><td><b>Observer:</b></td><td>"+curJson.obs+"</td></tr>";
		str+="<tr><td><b>Email:&nbsp;&nbsp;</b></td><td>"+curJson.email+"</td></tr>";
		str+="<tr><td><b>Teacher Id:</b></td><td>"+curJson.teacherId+"</td></tr>";
		str+="<tr><td><b>Grade:</b></td><td>"+curJson.grade+"</td></tr>";
		str+="</table></div>";
		
		str+="<div style='display:inline-block;margin-right:32px;vertical-align:top'><table>"
		str+="<tr><td style='width:100px'><b>Subject:</b></td><td>"+curJson.subject+"</td></tr>";
		str+="<tr><td><b>Date:</b></td><td>"+curJson.date+"</td></tr>";
		str+="<tr><td><b>Block:</b></td><td>"+curJson.block+"</td></tr>";
		str+="<tr><td><b>Setting:</b></td><td>"+curJson.setting+"</td></tr>";
		str+="<tr><td><b>Video:</b></td><td>"+curJson.video+"</td></tr>";
		str+="</table></div>";
		
		str+="<div style='display:inline-block;margin-right:32px;vertical-align:top'><table>"
		str+="<tr><td style='width:100px'><b>Reminder:</b></td><td>"+curJson.remind+"</td></tr>";
		str+="<tr><td><b>Research:</b></td><td>"+curJson.research+"</td></tr>";
		str+="<tr><td><b>Template:</b></td><td>"+curJson.template+"</td></tr>";
		str+="</table></div>";
		$("#dataPanel").append(str);										// Add to panel	
	}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CHARTS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    function DrawChart1() 												// DRAW CHART 1
	{
		var data=new google.visualization.DataTable();						// Make new table
		var t=[ [""],["This"],["All"],[othersLabel] ];						// Base
		for (var key in os.events) {										// For each event
			t[0].push(key);													// Add label
			t[1].push(ss.events[key] ? ss.events[key]-0 : 0);				// This data
			t[2].push(ts.events[key] ? ts.events[key]-0 : 0);				// All data
			t[3].push(os.events[key] ? os.events[key]-0 : 0);				// Others
			}
		var options=JSON.parse(JSON.stringify(chartOptions));				// Deep copy base options
  		options.isStacked=true;												// Stack		
	   	var chart=new google.visualization.ColumnChart(document.getElementById('chart1Chart'));
  		chart.draw(google.visualization.arrayToDataTable(t),options);
  	}

    function DrawChart2() 												// DRAW CHART 2
	{
		var data=new google.visualization.DataTable();						// Make new table
		var t=[ [""],["This"],["All"],[othersLabel] ];						// Base
		for (var key in os.tstatus) {										// For each status
			t[0].push(key);													// Add label
			t[1].push(ss.tstatus[key] ? ss.tstatus[key]-0 : 0);				// This data
			t[2].push(ts.tstatus[key] ? ts.tstatus[key]-0 : 0);				// All data
			t[3].push(os.tstatus[key] ? os.tstatus[key]-0 : 0);				// Others
			}
		var options=JSON.parse(JSON.stringify(chartOptions));				// Deep copy base options
		options.isStacked=true;												// Stack		
  	   	var chart=new google.visualization.ColumnChart(document.getElementById('chart2Chart'));
  		chart.draw(google.visualization.arrayToDataTable(t),options);
  	}

	function DrawChart4() 													// DRAW CHART 4
	{
		var data=new google.visualization.DataTable();						// Make new table
		var t=[ ["",""],["This"],["All"],[othersLabel] ];					// Base
		t[1].push(ss.engaged/100);											// This data
		t[2].push(ts.engaged/100);											// All data
		t[3].push(os.engaged/100);											// Others
		var options=JSON.parse(JSON.stringify(chartOptions));				// Deep copy base options
		options.vAxis={format:"percent", minValue:0,  maxValue:1};			// Values
		options.colors=["#27ae60"];											// Color
 		var chart=new google.visualization.ColumnChart(document.getElementById('chart4Chart'));
  		chart.draw(google.visualization.arrayToDataTable(t),options);
  	}

  function DrawChart3() 												// DRAW CHART 3
	{
		var data=new google.visualization.DataTable();						// Make new table
		var t=[ [""],["This"],["All"],[othersLabel] ];						// Base
		for (var key in os.sactions) {										// For each status
			t[0].push(key);													// Add label
			t[1].push(ss.sactions[key] ? ss.sactions[key]-0 : 0);			// This data
			t[2].push(ts.sactions[key] ? ts.sactions[key]-0 : 0);			// All data
			t[3].push(os.sactions[key] ? os.sactions[key]-0 : 0);			// Others
			}
		var options=JSON.parse(JSON.stringify(chartOptions));				// Deep copy base options
   		options.isStacked=true;												// Stack		
	   	var chart=new google.visualization.ColumnChart(document.getElementById('chart3Chart'));
  		chart.draw(google.visualization.arrayToDataTable(t),options);
  	}

	function DrawChart5() 													// DRAW CHART 5
	{
		var data=new google.visualization.DataTable();						// Make new table
		var t=[ ["",""],["This"],["All"],[othersLabel] ];					// Base
		t[1].push(ss.vocabNum-0);											// This data
		t[2].push(ts.vocabNum-0);											// All data
		t[3].push(os.vocabNum-0);											// Others
		var options=JSON.parse(JSON.stringify(chartOptions));				// Deep copy base options
  	   	var chart=new google.visualization.ColumnChart(document.getElementById('chart5Chart'));
  		chart.draw(google.visualization.arrayToDataTable(t),options);
  	}

	function DrawChart6() 													// DRAW CHART 6
	{
		var data=new google.visualization.DataTable();						// Make new table
		var t=[ ["",""],["This"],["All"],[othersLabel] ];					// Base
		t[1].push(ss.vocabTime-0);											// This data
		t[2].push(ts.vocabTime-0);											// All data
		t[3].push(os.vocabTime-0);											// Others
		var options=JSON.parse(JSON.stringify(chartOptions));				// Deep copy base options
   	   	var chart=new google.visualization.ColumnChart(document.getElementById('chart6Chart'));
  		chart.draw(google.visualization.arrayToDataTable(t),options);
  	}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function LoadingIcon(mode, size)									// SHOW/HIDE LOADING ICON		
	{
		if (!mode) {														// If hiding
			$("#ct-loadingIcon").remove();									// Remove it
			return;															// Quit
			}
		var str="<img src='img/loading.gif' width='"+size+"' ";				// Img
		str+="id='ct-loadingIcon' style='position:absolute;top:160px;left:calc(50% - "+size/2+"px);z-index:5000'>";	
		$("body").append(str);												// Add icon to container
	}

	function Query(query, callback) 
	{
		var dat={ q:query.replace(/'/g,"~") };
		var url="//classroomteachingscan.com/ctscan/query.php";				// Target
		$.ajax({ url:url,dataType:'text',type:"GET",crossDomain:true,data:dat,  // Get data
			success:function(d) { callback(d) },							// Run callback				
			error:function(xhr,status,error) { trace(error) },				// Show error
			});		
	}
		
	function ShortenString(str, len)									// SHORTEN A STRING TO LENGTH
	{
		if (!len)															// No length
			return "";														// Return null
		if (str && str.length > len)										// Too long
			str=str.substr(0,(len-3)/2)+"..."+str.slice((len-3)/-2);		// Shorten	
		return str;															// Return string
	}

	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

	function Sound(sound, mute)												// PLAY SOUND
	{
		var snd=new Audio();													// Init audio object
		if (!snd.canPlayType("audio/mpeg") || (snd.canPlayType("audio/mpeg") == "maybe")) 
			snd=new Audio("img/"+sound+".ogg");									// Use ogg
		else	
			snd=new Audio("img/"+sound+".mp3");									// Use mp3
		if (!mute)	{															// If not initing or muting	
			snd.volume=50/100;													// Set volume
			snd.play();															// Play it
			}
		}

/////////////////////// GOOGLE ANALYTICS //////////////////////////////////////////

	(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
	(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
	m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
	})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

	ga('create', 'UA-104678642-1', 'auto');
	ga('send', 'pageview');

</script>
</body>
</html>
