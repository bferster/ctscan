<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<meta http-equiv="x-ua-compatible" content="ie=edge">
	<link rel="stylesheet" href="css/jquery-ui.min.css"></link>
	<script src="lib/jquery.min.js"></script>
	<script src="lib/jquery-ui.min.js"></script>
	<link REL="SHORTCUT ICON" HREF="img/favicon.ico">
	<title>CTScan Data view</title>

	<style type="text/css">
		 
		 body { 			font-family: Verdana,Geneva,sans-serif; font-size:13px; box-sizing: border-box;
							padding: 0px; margin: 0px; 
							}
		.ct-viewPanel {		background-color:#ddd; border-radius: 6px; margin-top: 24px; padding: 12px; max-width:920px;
							margin-left: auto; margin-right: auto;
							}
		.ct-dataPanel {		border-radius: 6px; background-color:#eee;padding: 12px; max-width: 920px; margin-left: auto; margin-right: auto; max-height:800px;
							overflow-x:hidden; overflow-y:auto;
							}
		.ct-is 	{			border-radius:4px; padding-left:8px; border: 1px solid #999; margin-bottom: 3px;
							}

		.ct-but {			cursor: pointer; color:#fff; 
							text-align: center; border-radius: 6px; display: inline-block; user-select: none;
							font-size: 12px; background-color: #27ae60; padding: 2px 8px 2px 8px; vertical-align:3px;
							}
		.ct-dialogTitle {	font-size: 20px; font-weight: bold; color: #000; margin-bottom: 8px; user-select: none;
							}
		.ct-listItem { 		cursor:pointer;
							}
		.ct-listItem:hover{ background-color: #e8e8e8;
							}
		.ct-actionBut {		cursor: pointer; color:#fff; 
							text-align: center; border-radius: 6px; display: inline-block; user-select: none;
							font-size: 12px; background-color: #27ae60; padding: 2px 8px 2px 8px; vertical-align:-3px;
							}
		.unselectable { 	-moz-user-select: none;     -khtml-user-select: none;
		   			 		-webkit-user-select: none;  -ms-user-select: none;   user-select: none;
		   				}
		.ui-dialog-buttonpane.ui-widget-content.ui-helper-clearfix { border:none }
		.ui-dialog { border-radius:6px; background-color:#eee }
		.ui-button { border-radius:30px;outline:none }
		.ui-dialog-titlebar { display:none }
		 table {			border-spacing: 0px;  }
		 input {		    vertical-align: -2px; }

</style>
</head>
<body>
	<br>
	<div id="viewPanel" class="ct-viewPanel">
	<div style="text-align:center">
			<span style="float:right;color:#666">Help&nbsp;<a style="float:right" href="https://docs.google.com/document/d/19l87L5sZfLohU6rhQKLMERTNHhQr-jLiE4xQJeYN_3g/edit?usp=sharing" target="_blank">
	<img src="img/helpicon.gif" style="vertical-align:bottom" title="Show help"></a></span>

		<img src="img/ctlogo32.png"><br>
		<b>Classroom Teaching Scan Viewer</b></div>
		<br><hr>
		<div style="width:100%;overflow-y:auto;max-height:33vh">
			<table id="sessionTable" style="width:100%">	
				<tr style="font-weight:bold"><td>&nbsp;&#x2610;&nbsp;&nbsp;</td><td>Observer</td><td>Email</td><td>Date</td><td>Teacher</td><td>Research</td><td>ID</tr>
					<tr><td colspan='8'><hr></td></tr>
					<td><input type="checkbox" id="chooseAll"/></td>
					<td><input id="viewObs" class="ct-is"/></td>
					<td><input id="viewEmail" class="ct-is"/></td>
					<td nowrap><select id="viewDateComp" class="ct-is" style="height:19px;vertical-align:-2px;margin-right:-3px;"><option></option><option selected>=</option><option>!=</option><option><</option><option><=</option><option>></option><option>>=</option></select>
					<input id="viewDate" class="ct-is"style="height:17px" type="date"/></td>
					<td><input id="viewTid" class="ct-is" style="width:80px"/></td>
					<td><select id="viewRes" class="ct-is"><option></option><option>Pre-Intervention</option>";
						<option>Post-Intervention</option><option>Maintenance</option></select></td>
					<td><input id="viewSid" class="ct-is" style="width:30px"/></td></tr>
				<tr><td colspan='8'><hr></td></tr>
			</table>
		</div>	
			<hr>
			<div id="showRaw" class="ct-actionBut">View raw data</div>&nbsp;&nbsp;
			<div id="saveCSV" class="ct-actionBut">Save summary CSV file</div>&nbsp;&nbsp;
			<div id="showTimeline" class="ct-actionBut">View timeline</div>&nbsp;&nbsp;
			<div id="showReport" class="ct-actionBut">View Report</div>&nbsp;&nbsp;
			<div id="showCompare" class="ct-actionBut">Compare</div>
			<input style="float:right" id="password" type="password" class="ct-is" placeholder="Type password here"/>
 	</div><br>
	<div id="dataPanel" class="ct-dataPanel">No sessions selected...</div>

<script>

//////////////////////////////////////////////////////////////////////////////////////////////////
// MAIN 
/////////////////////////////////////////////////////////////////////////////////////////////////

var curJson=null;															// Holds session results
var menuFile="menus.txt";                                          			// Default menu name
var counters=[];                                                    		// Counter names
var categories=[];                                                  		// Category names
var qType=0;																// Assume Michael's QVI calculation
 
$(document).ready(function() {								           	// ON PAGE LOADED

	var url=window.location.search.substring(1);                        	// Get query string
	if (url && url.match(/&*john/i)) {										// If tagged for John Romig
			qType=1;														// QMI vs QVI
			url=url.replace(/&*john/i,"");									// Remove tag
			}
	if (url) {                                                          	// If something on command line
        menuFile=url;                                                   	// Get name
        if (!menuFile.match(/\.txt/))   menuFile+=".txt";               	// Add ext if not there
	    }
		
	$.ajax({ type: "GET", url: "menus/"+menuFile, success: function(text) { // Get menus text tile
        var i,j,o,cp,cc,subs;
        text=text.replace(/\n\r/g,"\n");                                    // LFCR -> LF
        text=text.replace(/\r\n/g,"\n");                                    // CRLF -> LF
        text=text.replace(/\r/g,"");                                        // Remove CR
        var lines=text.split("\n");                                         // Spit by line
        for (i=0;i<lines.length;++i) {                                      // For each line
            o=lines[i];                                                     // Point at line
            if (!o) continue;                                               // Skip blanks
            else if (o.match(/BUTVAL=/i))                                   // A counter
                counters=o.substr(7).split(",");                            // Get options
            else if (o.match(/:/))                                          // A category
                categories.push(o.substr(0,o.length-1));                    // Add cat name 
            }
        }});                                                                // On menus loaded

	Date.prototype.toDateInputValue = (function() {							// Set today's date
			var local=new Date(this);										// Get UTC
			return local.toJSON().slice(0,10);								// Get date portion
			});
	$("#viewDate").val(new Date().toDateInputValue());						// Init date to today
	SetHandlers();															// Set up handlers
	GetObservations();														// Show matching observations
	});		

	function SetHandlers() 												// SET EVENT HANDLERS							
	{
		$("#viewObs").on("change", function(e) {							// ON OBS CHANGE
			GetObservations("obs");											// Show matching observations
			});													
		$("#viewDate").on("change", function(e) {							// ON DATE CHANGE
			GetObservations("date");										// Show matching observations
			});													
		$("#viewDateComp").on("change", function(e) {						// ON DATE COMPARATOR CHANGE
			GetObservations("date");										// Show matching observations
			});													
		$("#viewEmail").on("change", function(e) {							// ON EMAIL CHANGE
			GetObservations("email");										// Show matching observations
			});													
		$("#viewTid").on("change", function(e) {							// ON TID CHANGE
			GetObservations("tid");											// Show matching observations
			});													
		$("#viewSid").on("change", function(e) {							// ON SESSSION ID CHANGE
			GetObservations("sid");											// Show matching observations
			});													
		$("#viewRes").on("change", function(e) {							// ON RESEARCH CHANGE
			GetObservations("res");											// Show matching observations
			});													
		$("#password").on("change", function(e) {							// ON PASSWORD CHANGE
			GetObservations("pass");										// Show matching observations
			});													
		$("#chooseAll").on("click", function(e) {							// ON CHECK ALL
			$("input:checkbox").prop("checked",$(this).prop("checked"));	// Toggle
			});													
		$("#showTimeline").on("click", function(e) {						// ON SHOW TIMELINE
				if (!curJson)												// If no data
					return;													// Quit	
				for (i=0;i<curJson.length;++i) 								// For each session
					if ($("#sessId-"+i).prop("checked")) 					// If checked
						window.open("timeline.htm?"+curJson[i].template+"&"+curJson[i].id,"_blank")	// Open tab
			Sound("click");													// Click sound	
			});													
		$("#showCompare").on("click", function(e) {							// ON COMPARE
				if (!curJson)												// If no data
					return;													// Quit	
				for (i=0;i<curJson.length;++i) 								// For each session
					if ($("#sessId-"+i).prop("checked")) {					// If checked
						window.open("compare.htm?"+curJson[i].id,"_blank")	// Open tab
						break;
					}
			Sound("click");													// Click sound	
			});													

		$("#showReport").on("click", function(e) {							// ON REPORT
				if (!curJson)												// If no data
					return;													// Quit	
				for (i=0;i<curJson.length;++i) 								// For each session
					if ($("#sessId-"+i).prop("checked")) {					// If checked
						window.open("reportmaker.htm?"+curJson[i].id,"_blank")	// Open tab
						break;
					}
			Sound("click");													// Click sound	
			});													
		$("#showRaw").on("click", function(e) {								// ON SHOW RAW
			if (!curJson)													// If no data
				return;														// Quit	
			var i;
			$("#dataPanel").html("No sessions selected...");				// Clear data panel										
			for (i=0;i<curJson.length;++i) {								// For each session
				if ($("#sessId-"+i).prop("checked")) { 						// If checked
					$("#dataPanel").html("");								// Clear data panel	
					break;
					}	
				}								
			for (i=0;i<curJson.length;++i) {								// For each session
				if ($("#sessId-"+i).prop("checked")) 						// If checked
					ShowRawData(i);											// Show raw data
				}	
			});													

			$("#saveCSV").on("click", function(e) {                     // ON SAVE CSV
				var v;
				if (!curJson)                                              	// If no data
					return;                                                 // Quit 
				GetTextBox("Save summary CSV File","Type name of CSV file to save to","summary.csv", function(s) {
					var o,i,s;
					var rows=[["SessionId","TeacherId","Group","ObsNum","Grade","Duration","Quality","NumVocabs"]];
					for (i=0;i<counters.length;++i)                      	// For each counter type
						rows[0].push(counters[i]);                        	// Add to row
					for (i=0;i<curJson.length;++i) {                      	// For each session
						if (!$("#sessId-"+i).prop("checked")) 				// If not checked
							continue;										// Skip it
						o=[];                                             	// Make new array for each data line
						v=curJson[i].research.split("-");					// Get research mode
						o.push(curJson[i].id);                     			// Add session id
						o.push(curJson[i].teacherId);                     	// Add teacher id
						o.push(v[0]);                      					// Add group
						o.push(v[2] ? v[2] : "");                          	// Add obsNum
						o.push(curJson[i].grade);                        	// Add grade
						CalcStats(i,o, qType);                                // Get stats from raw data
						rows.push(o);                                     	// Add data row
						}
					ExportToCSV(s,rows);                                    // Save to file
					})
				});
		
		function CalcStats(num, s, qType)  {                           // CALCULATE SESSION STATS
			var i,j,o,c=0,trt=0,quality=0;
			var e=$.parseJSON(curJson[num].events);                         // Objectify events
			for (j=0;j<e.length;++j) {                                      // For each event
				o=e[j];                                                     // Point at event
				trt=Math.max(trt,o.time);                                   // Get max time
				}
			s.push(trt);                                                    // Add duration to row
			for (j=0;j<e.length;++j) {                                 	 	// For each event
				o=e[j];                                               	  	// Point at event
				if (qType == 1) {											// QMI
					if ((o.d1 == "Practice") && (o.d2 == "Writing Instruction (General)") && (o.d3 == "Modeling")) // Add to quality
						quality+=((o.d4/100)+1)*(o.d5/trt);					// Calc QMI
					}			
				else{														// QVI
					if ((o.d1 == "Practice") && (o.d2 == "Vocabulary Instruction")) // Add to quality
						quality+=((o.d4/100)+1)*(o.d5/trt);					// Calc QVI
					}
				if (o.d1 == "Vocab Word")	++c;							// Add word
				}
			s.push(quality.toFixed(2));										// Add quality to row
			s.push(c);                                                 		// Add count to row
			for (i=0;i<counters.length;++i) {                               // For each counter type        
				c=0;                                                        // Reset count
				for (j=0;j<e.length;++j) {                                  // For each event
					o=e[j];                                                 // Point at event
					if (o.d3 == counters[i])    ++c;                        // A match, in
					}
				s.push(c);                                                  // Add counter to row
				}
   		 	}
	}
	
	function ShowRawData(num)											// SHOW RAW DATA
	{
		var i,col;
		var str="<table>"
		str+="<tr id='od-name'><td><b>Observer</b></td><td>"+curJson[num].obs+"<td></tr>";
		str+="<tr id='od-email'><td><b>Email</b></td><td>"+curJson[num].email+"<td></tr>";
		str+="<tr id='od-tid'><td><b>Teacher&nbsp;Id&nbsp;&nbsp</b></td><td>"+curJson[num].teacherId+"<td></tr>";
		str+="<tr id='od-grade'><td><b>Grade</b></td><td>"+curJson[num].grade+"<td></tr>";
		str+="<tr id='od-subject'><td><b>Subject:</b></td><td>"+curJson[num].subject+"<td></tr>";
		str+="<tr id='od-date'><td><b>Date</b></td><td>"+curJson[num].date+"<td></tr>";
		str+="<tr id='od-block'><td><b>Block</b></td><td>"+curJson[num].block+"<td></tr>";
		str+="<tr id='od-setting'><td><b>Setting</b></td><td>"+curJson[num].setting+"<td></tr>";
		str+="<tr id='od-video'><td><b>Video</b></td><td>"+curJson[num].video+"<td></tr>";
		str+="<tr><td><b>Reminder</b></td><td>"+curJson[num].remind+"<td></tr>";
		str+="<tr><td><b>Research</b></td><td>"+curJson[num].research+"<td></tr>";
		str+="<tr><td><b>Template</b></td><td>"+curJson[num].template+"<td></tr>";
		str+"<br>";
		var d=$.parseJSON(curJson[num].events);								// Objectify
		for (i=0;i<d.length;++i) {											// For each event
			col=(d[i].d1 == "Practice") ? "#990000" : "#000";				// Color practices 
			str+="<tr style='color:"+col+"' id=oe-"+i+"><td><b>Event</b></td><td style='overflow:hidden;white-space:nowrap'><div style='display:inline-block;width:40px'>"+d[i].time+"</div><b>";
				str+=d[i].d1+"</b>,"+ShortenString(d[i].d2,30)+","+ShortenString(d[i].d3,40)+","+ShortenString(d[i].d4,20)+","+d[i].d5+"</td></tr>";
			}	
		str+="</table><hr>";
		$("#dataPanel").append(str);										// Add to data panel										
	}

	function GetObservations()											// GET SELECTED OBSERVATIONS FROM DB
	{
		var obs=$("#viewObs").val();										// Get observer name
		var email=$("#viewEmail").val();									// Get observer email
		var now=$("#viewDate").val();										// Get date
		var tid=$("#viewTid").val();										// Get teacher id
		var sid=$("#viewSid").val();										// Get session id
		var res=$("#viewRes").val();										// Get research type
		var dc=$("#viewDateComp").val();									// Get date comparator
		var pass=$("#password").val();										// Get password

		var q="id != '0'";													// Query base (all)
		if (sid)															// If a session is set
			q="id = '"+sid+"'";												// Base query on id			
		if (dc)																// If a date set
			q+=" AND date "+dc+"'"+now+"'";									// Add date to query				
		if (obs)															// If an obs set
			q+=" AND obs LIKE '%"+obs+"%'";									// Add to query				
		if (email)															// If an set
			q+=" AND email LIKE '%"+email+"%'";								// Add to query				
		if (tid)															// If an tid set
			q+=" AND teacherId LIKE '%"+tid+"%'";							// Add to query				
		if (res)															// If a res set
			q+=" AND research LIKE '%"+res+"%'";							// Add to query				
		if (pass && (pass != "7001"))										// If a password set and not magic one
			q+=" AND password = '"+pass+"'";								// Add to query				
		else if (!pass)														// If no password, show all blank ones
			q+=" AND (password IS NULL OR password ='')";					// Add to query				
		q+=" ORDER BY date DESC";											// Sort by
	 	$("#sessionTable").find("tr:gt(3)").remove();						// Clear sessions

		Query(q, function(d) { 												// Send query
			var i,str;
			if (!d || d == "null")	{										// No hits													
				$("#sessionTable").append("<tr><td colspan='5'>No sessions matched...</td></tr>");	// Tell			
				return;;													// Quit
				}
			d=$.parseJSON(d);												// Objectify result
			curJson=d;														// Save data
			for (i=0;i<d.length;++i) {										// For each one
				str="<td><input type='checkbox' id='sessId-"+i+"'/></td>";	// Checkbox
				str+="<td>"+d[i].obs+"</td>";								// Fill obs
				str+="<td>"+d[i].email+"</td>";								// Fill email
				str+="<td>"+d[i].date+"</td>";								// Fill date
				str+="<td>"+d[i].teacherId+"</td>";							// Fill tid
				str+="<td>"+d[i].research+"</td>";							// Fill res
				str+="<td>"+d[i].id+"</td>";								// Fill id
				$("#sessionTable").append("<tr class='ct-listItem' id='rowId-"+i+"' >"+str+"</tr>");
			
				$("#rowId-"+i).on("click", function(e) {					// ROW CLICK HANDLER
					var id=e.currentTarget.id.substr(6);					// Get id			
					if (!e.target.id.match(/sessId-/))						// If on row
						$("#sessId-"+id).trigger("click");					// Click checkbox
					Sound("click");											// Click
					});		

				}

			});
	
	Sound("click");															// Click sound	
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function ExportToCSV(filename, rows) {
 	    var processRow = function (row) {
            var finalVal = '';
            for (var j = 0; j < row.length; j++) {
                var innerValue = row[j] === null ? '' : row[j].toString();
                if (row[j] instanceof Date) {
                    innerValue = row[j].toLocaleString();
                };
                var result = innerValue.replace(/"/g, '""');
                if (result.search(/("|,|\n)/g) >= 0)
                    result = '"' + result + '"';
                if (j > 0)
                    finalVal += ',';
                finalVal += result;
            }
            return finalVal + '\n';
        };

        var csvFile = '';
        for (var i=0; i<rows.length;i++)
            csvFile+=processRow(rows[i]);
    
	    var blob = new Blob([csvFile], { type: 'text/csv;charset=utf-8;' });
        if (navigator.msSaveBlob) { // IE 10+
            navigator.msSaveBlob(blob, filename);
        } else {
            var link = document.createElement("a");
    		    if (link.download !== undefined) { 							// Browsers that support HTML5 download attribute
					var url = URL.createObjectURL(blob);
					link.setAttribute("href", url);
					link.setAttribute("download", filename);
					link.style.visibility = 'hidden';
					document.body.appendChild(link);
					link.click();
					document.body.removeChild(link);
					}
				}
    }

	function Query(query, callback) 
	{
		var dat={ q:query.replace(/'/g,"~") };
		var url="//classroomteachingscan.com/ctscan/query.php";				// Target

		$.ajax({ url:url,dataType:'text',type:"GET",crossDomain:true,data:dat,  // Get data
			success:function(d) { callback(d) },							// Run callback				
			error:function(xhr,status,error) { trace(error) },				// Show error
			});		
	}
		
	function GetTextBox(title, content, def, callback)					// GET TEXT LINE BOX
	{
		$("#alertBoxDiv").remove();											// Remove any old ones
		$("body").append("<div class='unselectable' id='alertBoxDiv'></div>");														
		var str="<p><img src='img/ctlogo32.png' style='vertical-align:-8px'/>&nbsp;&nbsp;";								
		str+="<span class='ct-dialogTitle'>"+title+"</span><p>";
		str+="<div style='font-size:12px;margin:14px'>"+content;
		str+="<p><input class='ct-is' type='text' id='gtBoxTt' value='"+def+"'></p>";
		str+="<div id='dialogOK' class='ct-but'>OK</div>";
		str+="<div id='dialogCancel' class='ct-but' style='margin-left:8px;background-color:#990000'>Cancel</div></div>";
		
		$("#alertBoxDiv").append(str);	
		$("#alertBoxDiv").dialog({ width:500 });	
		$("#alertBoxDiv").dialog("option","position",{ my:"center", at:"center", of:viewPanel });
		$("#alertBoxDiv").css({ border:"1px solid #990000","border-radius":"6px"});

		$("#dialogOK").on("click", function() {								// ON OK BUT
					callback($("#gtBoxTt").val());
					$("#alertBoxDiv").remove();  
				});

		$("#dialogCancel").on("click", function() {							// ON CANCEL BUT
				$("#alertBoxDiv").remove();									// Remove 
				Sound("delete");											// Delete sound
			});
		}

	function ShortenString(str, len)									// SHORTEN A STRING TO LENGTH
	{
		if (str && str.length > len)										// Too long
			str=str.substr(0,(len-3)/2)+"..."+str.slice((len-3)/-2);		// Shorten	
		return str;															// Return string
	}

	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

	function Sound(sound, mute)												// PLAY SOUND
	{
		var snd=new Audio();													// Init audio object
		if (!snd.canPlayType("audio/mpeg") || (snd.canPlayType("audio/mpeg") == "maybe")) 
			snd=new Audio("img/"+sound+".ogg");									// Use ogg
		else	
			snd=new Audio("img/"+sound+".mp3");									// Use mp3
		if (!mute)	{															// If not initing or muting	
			snd.volume=50/100;													// Set volume
			snd.play();															// Play it
			}
		}

//////////////////////// GOOGLE ANALTICS //////////////////////////////////////
 
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-104678642-1', 'auto');
  ga('send', 'pageview');
	
</script>
</body>
</html>
